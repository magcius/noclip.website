static P8_PALETTE: &[u8] = &[
    0xFF,0x7A,0x19,0xCC,0xFF,0x7E,0x19,0xCC,0xFF,0x80,0x19,0xCC,0xFF,0x81,0x19,0xCC,0xFF,0x85,0x19,0xCC,0xFF,0x74,0x2F,0xE2,0xFF,0x7A,0x2F,0xE2,0xFF,0x7E,0x2F,0xE2,0xFF,0x80,0x2F,0xE2,0xFF,0x81,0x2F,0xE2,0xFF,0x85,0x2F,0xE2,0xFF,0x8B,0x2F,0xE2,0xFF,0x6B,0x42,0xED,0xFF,0x74,0x42,0xEE,0xFF,0x7A,0x42,0xEF,0xFF,0x7E,0x42,0xEF,
    0xFF,0x80,0x42,0xEF,0xFF,0x81,0x42,0xEF,0xFF,0x85,0x42,0xEF,0xFF,0x8B,0x42,0xEE,0xFF,0x94,0x42,0xED,0xFF,0x60,0x52,0xF2,0xFF,0x6B,0x52,0xF5,0xFF,0x74,0x52,0xF6,0xFF,0x7A,0x52,0xF7,0xFF,0x7E,0x52,0xF7,0xFF,0x80,0x52,0xF7,0xFF,0x81,0x52,0xF7,0xFF,0x85,0x52,0xF7,0xFF,0x8B,0x52,0xF6,0xFF,0x94,0x52,0xF5,0xFF,0x9F,0x52,0xF2,
    0xFF,0x52,0x60,0xF2,0xFF,0x60,0x60,0xF7,0xFF,0x6B,0x60,0xF9,0xFF,0x74,0x60,0xFB,0xFF,0x7A,0x60,0xFB,0xFF,0x7E,0x60,0xFB,0xFF,0x80,0x60,0xFB,0xFF,0x81,0x60,0xFB,0xFF,0x85,0x60,0xFB,0xFF,0x8B,0x60,0xFB,0xFF,0x94,0x60,0xF9,0xFF,0x9F,0x60,0xF7,0xFF,0xAD,0x60,0xF2,0xFF,0x42,0x6B,0xED,0xFF,0x52,0x6B,0xF5,0xFF,0x60,0x6B,0xF9,
    0xFF,0x6B,0x6B,0xFC,0xFF,0x74,0x6B,0xFD,0xFF,0x7A,0x6B,0xFD,0xFF,0x7E,0x6B,0xFD,0xFF,0x80,0x6B,0xFD,0xFF,0x81,0x6B,0xFD,0xFF,0x85,0x6B,0xFD,0xFF,0x8B,0x6B,0xFD,0xFF,0x94,0x6B,0xFC,0xFF,0x9F,0x6B,0xF9,0xFF,0xAD,0x6B,0xF5,0xFF,0xBD,0x6B,0xED,0xFF,0x2F,0x74,0xE2,0xFF,0x42,0x74,0xEE,0xFF,0x52,0x74,0xF6,0xFF,0x60,0x74,0xFB,
    0xFF,0x6B,0x74,0xFD,0xFF,0x74,0x74,0xFE,0xFF,0x7A,0x74,0xFE,0xFF,0x7E,0x74,0xFE,0xFF,0x80,0x74,0xFE,0xFF,0x81,0x74,0xFE,0xFF,0x85,0x74,0xFE,0xFF,0x8B,0x74,0xFE,0xFF,0x94,0x74,0xFD,0xFF,0x9F,0x74,0xFB,0xFF,0xAD,0x74,0xF6,0xFF,0xBD,0x74,0xEE,0xFF,0xD0,0x74,0xE2,0xFF,0x19,0x7A,0xCC,0xFF,0x2F,0x7A,0xE2,0xFF,0x42,0x7A,0xEF,
    0xFF,0x52,0x7A,0xF7,0xFF,0x60,0x7A,0xFB,0xFF,0x6B,0x7A,0xFD,0xFF,0x74,0x7A,0xFE,0xFF,0x7A,0x7A,0xFF,0xFF,0x7E,0x7A,0xFF,0xFF,0x80,0x7A,0xFF,0xFF,0x81,0x7A,0xFF,0xFF,0x85,0x7A,0xFF,0xFF,0x8B,0x7A,0xFE,0xFF,0x94,0x7A,0xFD,0xFF,0x9F,0x7A,0xFB,0xFF,0xAD,0x7A,0xF7,0xFF,0xBD,0x7A,0xEF,0xFF,0xD0,0x7A,0xE2,0xFF,0xE5,0x7A,0xCC,
    0xFF,0x19,0x7E,0xCC,0xFF,0x2F,0x7E,0xE2,0xFF,0x42,0x7E,0xEF,0xFF,0x52,0x7E,0xF7,0xFF,0x60,0x7E,0xFB,0xFF,0x6B,0x7E,0xFD,0xFF,0x74,0x7E,0xFE,0xFF,0x7A,0x7E,0xFF,0xFF,0x7E,0x7E,0xFF,0xFF,0x80,0x7E,0xFF,0xFF,0x81,0x7E,0xFF,0xFF,0x85,0x7E,0xFF,0xFF,0x8B,0x7E,0xFE,0xFF,0x94,0x7E,0xFD,0xFF,0x9F,0x7E,0xFB,0xFF,0xAD,0x7E,0xF7,
    0xFF,0xBD,0x7E,0xEF,0xFF,0xD0,0x7E,0xE2,0xFF,0xE5,0x7E,0xCC,0xFF,0x19,0x80,0xCC,0xFF,0x2F,0x80,0xE2,0xFF,0x42,0x80,0xEF,0xFF,0x52,0x80,0xF7,0xFF,0x60,0x80,0xFB,0xFF,0x6B,0x80,0xFD,0xFF,0x74,0x80,0xFE,0xFF,0x7A,0x80,0xFF,0xFF,0x7E,0x80,0xFF,0xFF,0x80,0x80,0xFF,0xFF,0x81,0x80,0xFF,0xFF,0x85,0x80,0xFF,0xFF,0x8B,0x80,0xFE,
    0xFF,0x94,0x80,0xFD,0xFF,0x9F,0x80,0xFB,0xFF,0xAD,0x80,0xF7,0xFF,0xBD,0x80,0xEF,0xFF,0xD0,0x80,0xE2,0xFF,0xE5,0x80,0xCC,0xFF,0x19,0x81,0xCC,0xFF,0x2F,0x81,0xE2,0xFF,0x42,0x81,0xEF,0xFF,0x52,0x81,0xF7,0xFF,0x60,0x81,0xFB,0xFF,0x6B,0x81,0xFD,0xFF,0x74,0x81,0xFE,0xFF,0x7A,0x81,0xFF,0xFF,0x7E,0x81,0xFF,0xFF,0x80,0x81,0xFF,
    0xFF,0x81,0x81,0xFF,0xFF,0x85,0x81,0xFF,0xFF,0x8B,0x81,0xFE,0xFF,0x94,0x81,0xFD,0xFF,0x9F,0x81,0xFB,0xFF,0xAD,0x81,0xF7,0xFF,0xBD,0x81,0xEF,0xFF,0xD0,0x81,0xE2,0xFF,0xE5,0x81,0xCC,0xFF,0x19,0x85,0xCC,0xFF,0x2F,0x85,0xE2,0xFF,0x42,0x85,0xEF,0xFF,0x52,0x85,0xF7,0xFF,0x60,0x85,0xFB,0xFF,0x6B,0x85,0xFD,0xFF,0x74,0x85,0xFE,
    0xFF,0x7A,0x85,0xFF,0xFF,0x7E,0x85,0xFF,0xFF,0x80,0x85,0xFF,0xFF,0x81,0x85,0xFF,0xFF,0x85,0x85,0xFF,0xFF,0x8B,0x85,0xFE,0xFF,0x94,0x85,0xFD,0xFF,0x9F,0x85,0xFB,0xFF,0xAD,0x85,0xF7,0xFF,0xBD,0x85,0xEF,0xFF,0xD0,0x85,0xE2,0xFF,0xE5,0x85,0xCC,0xFF,0x2F,0x8B,0xE2,0xFF,0x42,0x8B,0xEE,0xFF,0x52,0x8B,0xF6,0xFF,0x60,0x8B,0xFB,
    0xFF,0x6B,0x8B,0xFD,0xFF,0x74,0x8B,0xFE,0xFF,0x7A,0x8B,0xFE,0xFF,0x7E,0x8B,0xFE,0xFF,0x80,0x8B,0xFE,0xFF,0x81,0x8B,0xFE,0xFF,0x85,0x8B,0xFE,0xFF,0x8B,0x8B,0xFE,0xFF,0x94,0x8B,0xFD,0xFF,0x9F,0x8B,0xFB,0xFF,0xAD,0x8B,0xF6,0xFF,0xBD,0x8B,0xEE,0xFF,0xD0,0x8B,0xE2,0xFF,0x42,0x94,0xED,0xFF,0x52,0x94,0xF5,0xFF,0x60,0x94,0xF9,
    0xFF,0x6B,0x94,0xFC,0xFF,0x74,0x94,0xFD,0xFF,0x7A,0x94,0xFD,0xFF,0x7E,0x94,0xFD,0xFF,0x80,0x94,0xFD,0xFF,0x81,0x94,0xFD,0xFF,0x85,0x94,0xFD,0xFF,0x8B,0x94,0xFD,0xFF,0x94,0x94,0xFC,0xFF,0x9F,0x94,0xF9,0xFF,0xAD,0x94,0xF5,0xFF,0xBD,0x94,0xED,0xFF,0x52,0x9F,0xF2,0xFF,0x60,0x9F,0xF7,0xFF,0x6B,0x9F,0xF9,0xFF,0x74,0x9F,0xFB,
    0xFF,0x7A,0x9F,0xFB,0xFF,0x7E,0x9F,0xFB,0xFF,0x80,0x9F,0xFB,0xFF,0x81,0x9F,0xFB,0xFF,0x85,0x9F,0xFB,0xFF,0x8B,0x9F,0xFB,0xFF,0x94,0x9F,0xF9,0xFF,0x9F,0x9F,0xF7,0xFF,0xAD,0x9F,0xF2,0xFF,0x60,0xAD,0xF2,0xFF,0x6B,0xAD,0xF5,0xFF,0x74,0xAD,0xF6,0xFF,0x7A,0xAD,0xF7,0xFF,0x7E,0xAD,0xF7,0xFF,0x80,0xAD,0xF7,0xFF,0x81,0xAD,0xF7,
    0xFF,0x85,0xAD,0xF7,0xFF,0x8B,0xAD,0xF6,0xFF,0x94,0xAD,0xF5,0xFF,0x9F,0xAD,0xF2,0xFF,0x6B,0xBD,0xED,0xFF,0x74,0xBD,0xEE,0xFF,0x7A,0xBD,0xEF,0xFF,0x7E,0xBD,0xEF,0xFF,0x80,0xBD,0xEF,0xFF,0x81,0xBD,0xEF,0xFF,0x85,0xBD,0xEF,0xFF,0x8B,0xBD,0xEE,0xFF,0x94,0xBD,0xED,0xFF,0x74,0xD0,0xE2,0xFF,0x7A,0xD0,0xE2,0xFF,0x7E,0xD0,0xE2,
    0xFF,0x80,0xD0,0xE2,0xFF,0x81,0xD0,0xE2,0xFF,0x85,0xD0,0xE2,0xFF,0x8B,0xD0,0xE2,0xFF,0x7A,0xE5,0xCC,0xFF,0x7E,0xE5,0xCC,0xFF,0x80,0xE5,0xCC,0xFF,0x81,0xE5,0xCC,0xFF,0x85,0xE5,0xCC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0xFF
];

pub fn convert_p8_data(input: &[u8]) -> Vec<u8> {
    let mut result = Vec::with_capacity(input.len() * 4);
    for &px in input {
        let p8_offset = 4 * px as usize;
        result.push(P8_PALETTE[p8_offset+1]);
        result.push(P8_PALETTE[p8_offset+2]);
        result.push(P8_PALETTE[p8_offset+3]);
        result.push(P8_PALETTE[p8_offset+0]);
    }
    result
}

pub fn convert_a8_data(input: &[u8]) -> Vec<u8> {
    let mut result = Vec::with_capacity(input.len() * 4);
    for &a in input {
        result.push(0xFF);
        result.push(0xFF);
        result.push(0xFF);
        result.push(a);
    }
    result
}

pub fn convert_a8y8_data(input: &[u8]) -> Vec<u8> {
    let mut result = Vec::with_capacity(input.len() * 2);
    for i in (0..input.len()).step_by(2) {
        result.push(input[i]);
        result.push(input[i]);
        result.push(input[i]);
        result.push(input[i+1]);
    }
    result
}

pub fn convert_y8_data(input: &[u8]) -> Vec<u8> {
    let mut result = Vec::with_capacity(input.len() * 4);
    for &x in input {
        result.push(x);
        result.push(x);
        result.push(x);
        result.push(0xFF);
    }
    result
}

pub fn convert_x8r8g8b8_data(input: &[u8]) -> Vec<u8> {
    let mut result = Vec::with_capacity(input.len());
    for i in 0..input.len()/4 {
        let pixel_offset = 4*i;
        result.push(input[pixel_offset + 2]);
        result.push(input[pixel_offset + 1]);
        result.push(input[pixel_offset + 0]);
        result.push(0xFF);
    }
    result
}

pub fn convert_a8r8g8b8_data(input: &[u8]) -> Vec<u8> {
    let mut result = Vec::with_capacity(input.len());
    for i in 0..input.len()/4 {
        let pixel_offset = 4*i;
        result.push(input[pixel_offset + 2]);
        result.push(input[pixel_offset + 1]);
        result.push(input[pixel_offset + 0]);
        result.push(input[pixel_offset + 3]);
    }
    result
}